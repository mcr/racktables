#!/bin/sh

# This gateway retrieves the output of "show run" command (or its
# equivalent) and prints it onto stdout. When run, it accepts the
# only command on stdin:
#
# * retrieve <endpoint> <hardware> <software>: print text and terminate

endpoint=
hw=
sw=
MYDIR=`dirname $0`

decode_error()
{
	case "$1" in
		0)
			echo -n 'success'
		;;
		1)
			echo -n 'internal error 1'
		;;
		2)
			echo -n 'internal error 2'
		;;
		3)
			echo -n 'password not found'
		;;
		4)
			echo -n 'invalid password'
		;;
		5)
			echo -n 'cannot create temporary files'
		;;
		6)
			echo -n 'invalid command'
		;;
		7)
			echo -n 'unknown host OS'
		;;
		*)
			echo -n 'unknown error'
		;;
	esac
}

do_work()
{
	endpoint=`echo $args | cut -s -d' ' -f1`
	hw=`echo $args | cut -s -d' ' -f2`
	sw=`echo $args | cut -s -d' ' -f3`
	# sanity checks
	if [ -z "$endpoint" -o -z "$hw" -o -z "$sw" ]; then
		echo 'ERR!too few arguments to connect'
		return
	fi
	case "$sw" in
		Cisco+IOS+12.0|Cisco+IOS+12.1|Cisco+IOS+12.2)
			handler=cisco
		;;
		*)
			echo "ERR!Don't know how to handle $sw on $endpoint"
			return
		;;
	esac

	CONFTEXT=`mktemp /tmp/racktables.XXXX`
	if ! [ -f "$CONFTEXT" ]; then
		echo 'ERR!could not create tmpfile'
		return
	fi

	"$MYDIR/$handler.connector" $endpoint "$CONFTEXT"
	ret=$?
	if [ $ret = 0 ]; then
		echo "OK!connected to $endpoint"
		cat "$CONFTEXT"
	else
		echo -n "ERR!Cannot connect to $endpoint ("
		decode_error $ret
		echo ')'
	fi
}

while read cmd args; do
	case $cmd in
		retrieve)
			do_work $args
			rm -f "$CONFTEXT"
			exit 0
			;;
		*)
			echo "ERR!unknown command $cmd"
	esac
done

exit 0
